[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "Assignment1",
    "section": "",
    "text": "For example, in the above Bored Ape, it has the characteristics of: Yellow Background, White Fur, Orange Beanie. Pretty much everything in the picture is pre-specified and generated through an algorithm that puts it all together.\nA more interesting example is the winner of the 2022 Colorado State Fair Art Competition, Jason Allen, and his piece, “Théâtre D’opéra Spatial”. His piece was actually largely created by a text-to-picture AI called Midjourney, which is similar to DALL-E 2. This program works by giving the AI a prompt, and it generates a picture in about a minute. The pictures are not perfect, but Allen was able to remove the visual artifacts from the picture to create the winning piece. \nAnother Example of generative art comes from https://fronkonstin.com where one can generate some plant art that the color of change be changed. In my case, i changed the color of the plant to ‘darkorchid4’ which is a purple shade.\n\n\n\nPlant\n\n\nFinally, here is a graph that was created that is quite funny.\n\n\n\nFox News Pie\n\n\nThis graph wanted to show the percentage of voters that supported certain presidential candidates during the 2012 election. However, the figure choice is just abysmal. Giving Fox news the benefit of the doubt, we might say that the survey only asked if they supported the GOP candidates, not which one they supported over the other, thus allowing the total percentage to not be capped at 100%. That said, this would be better represented as a bar graph, that way you can display the tight race more accurately, as well as get a quick view as the most likely candidate. Putting the data into a pie chart confuses the general audience as it does not convey meaningful comparison between the candidates, as well as pie charts are generally capped at 100%. Therefore the data could be better represented as a bar graph instead of a pie chart."
  },
  {
    "objectID": "assignment2.html",
    "href": "assignment2.html",
    "title": "assignment 2",
    "section": "",
    "text": "EPPS6356\n\n\n\n\n\n\n\n\n\n\n\nSep 20, 2022\n\n\nNicholas Champagne\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "assignment4.html",
    "href": "assignment4.html",
    "title": "Assignment4: Hackathon",
    "section": "",
    "text": "These are the charts that we made: \nThis first graph shows the average Overall High School GPA for students based on their eighth grade Math Letter Score. It is separated based on the gender of the student, and the width of each columns is representative of the percent of the gendered population. Therefore, when we look at the leftmost column, which is boys who got an A in eighth grade math, they averaged 3.14 High school GPA, and they make up 34% of boys. The data for this code comes from the High School Longitudinal Study for 2009-2013, so you will need that in order to reproduce the data, and it can be found here.There is also the package scales necessary for the code, it just displays a number as a percentage, so you can remove the whole text command if you do not want to install it. The code for the following graph is:\nThis graph shows the number of cancer incidences in an age, and tobacco usage cohort. The main visual interest in this graph is the relative height of the red bar. Since the cohorts had a different total study number, the bar graphs are scaled around the control group so that visual inspection can easily be done on the rate for each bar graph. For example, the oldest age cohort with the highest tobacco usage, found in the bottom right, has a very high rate of cancer incidence as the red bar is very close to the blue bar. This uses the esoph dataset from r, so the data should come with it. The code for this plot is:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nicholas Champagne",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/Post 1/Blog Post.html",
    "href": "posts/Post 1/Blog Post.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Here is the resulting graph: \nThe next line of code, using the text() command, which adds in text into an existing plot. In this case, we are just adding a description of the graph. \nThe next line of code, using the par() command just separates the graphical environment into subsections. For this case, we are using the option mfrow = c(3,2), which creates 3 rows and 2 columns of subspace for the graphs, or 6 total sub-graph environments.\nAfter defining out some variables we use the par() command again to define some more parameters for our subgraph environment. The las option changes the orientation of the axis label, in our case, 1 moves it to be horizontal to the axis. The mar option changes the margins for the plot. Finally the cex option re-scales the things being plotted, our case decreases the size by 30%. Finally to create a new plot in our sub-graph environment, we use the plot.new() command.\nAfter we create the new plot environment, we can define out the ranges of the plot using the plot.window() command which we feed a x and y range to set at the axis for our plot. After this, we finally create our graph using the line() command, which just draws a line between points, in this case we do it with x and y1 and y2, which we defined earlier. Then we use the points() command to actually plot the points onto the graph, using the pch option to change the type of point, and the bg option to change the color of the points. After we have the main information of the plot, we need to add the rest of the information so it can actually be interpreted. The axis() command creates an axis for a plot, and it requires a side number, the first number in the command, which specifies the side that the axis will be applied to. Finally the at option puts the tic marks on the axis, which uses the seq() command to do it from the first number, to the second number, at the interval of the third number. The box() command adds a box to the graph, and the option bty specifies a box with the top open. Finally we can use the mtext() and text() commands from earlier to add in text to the plot, and in total it looks like this: \nFrom here we are going to create a graph right next to our previously created graph. After defining out some variable parameters, we can use the hist() command to create a histogram of y. The first option is our data, the breaks option is what determines which data points go into which categories, in this case it will be from -3.5, our lowest value, to 3.5, our highest value, with each break spanning 1 unit. The ylim option sets the range for y axis. Finally the feq option, when set to FALSE, displays the data as a percentage of total data, whereas when set to TRUE, it displays the counts of the data points. After this we use the lines() command to draw a normal distribution over our histogram. This is what our histogram looks like: \nThe next graph is a bar plot, which we can use the barplot() command to draw. We use the VADeaths data set, which is the death rates per 1000 in Virginia in 1940. We can change the color of the bar plots for the different age groups by using the col option combined with the gray() command and the seq() to sequentially vary the gray. Adding in the text using the mtext and text command we can add in the numbers for the sizes of each subsection of the bar, and display which data that each bar represents. This is what the updated graph looks like: \nThe next plot that we will create is the box plot, using the boxplot() command, which shows the median, interquartile range, min/maxes, and outliers. For this we will use the Toothgrowth data set. For the box plot itself we have to define a regression, and in this case, we define our regression as length ~ dose. We also use the subset option to add the Ascorbic Acid and Orange Juice regressions separately so that we can change the color of the boxes so that they stand out from each other. The legend() command allows us to define a legend in the plot space and the fill option gives up the ability to specify the colors for our legend. \nThe next plot is a perspective plot, which is used to plot 3 dimensional graphs. After defining out our x,y,z, we can use the persp() command to plot it. The theta and phi options are used to rotate the graph into different viewing angles, in this case we chose 30 degrees for both of them. \nFinally, the last plot to add into our series is the pie chart, which we can use the pie() command to draw it. Since the pie graph isn’t done in a plot environment, we need to edit our par() command with the xpd = FALSE option so that we can add a figure into the plot sub-environment. The pie command takes our data set defined in the line above, and creates slices of the data representative of the percentage of the total. We also can define the colors of each slice by using the col option. \nNote that each of these graphs were put into the sub-environments that we defined earlier when we used the first par() command with the mfrow option. If we wanted any of these graph on its own, we can just run the code for the graph, but we have to make sure that the code is not trying to push it into a sub environment. If the graphs are no longer necessary, we can use the dev.off() command to remove all the existing graphs."
  },
  {
    "objectID": "assignment4.html#coordinator-info",
    "href": "assignment4.html#coordinator-info",
    "title": "Assignment4: Hackathon",
    "section": "Coordinator Info:  ",
    "text": "Coordinator Info:  \nThe following parts of the graphs were done by the team members: Data Collection and Curation - Alden   Graph Formatting - Nick   R code Production - Jim and Will"
  }
]